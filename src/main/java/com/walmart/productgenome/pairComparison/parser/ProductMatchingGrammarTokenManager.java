/* Generated By:JavaCC: Do not edit this line. ProductMatchingGrammarTokenManager.java */
package com.walmart.productgenome.pairComparison.parser;
import java.io.*;
import java.util.*;
import com.google.common.collect.*;
import org.apache.commons.collections.*;
import com.walmart.productgenome.pairComparison.model.Constants;
import com.walmart.productgenome.pairComparison.model.rule.*;

/** Token Manager. */
public class ProductMatchingGrammarTokenManager implements ProductMatchingGrammarConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xa0L) != 0L)
            return 2;
         if ((active0 & 0xfff3fa0000L) != 0L)
         {
            jjmatchedKind = 40;
            return 6;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 40;
            return 17;
         }
         return -1;
      case 1:
         if ((active0 & 0x80L) != 0L)
            return 0;
         if ((active0 & 0x2100000L) != 0L)
            return 6;
         if ((active0 & 0x4000000L) != 0L)
            return 16;
         if ((active0 & 0xfff1ea0000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0x1200000L) != 0L)
            return 6;
         if ((active0 & 0xfff0ca0000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 2;
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0xffc0ca0000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 40;
               jjmatchedPos = 3;
            }
            return 6;
         }
         if ((active0 & 0x30000000L) != 0L)
            return 6;
         return -1;
      case 4:
         if ((active0 & 0xcfe04a0000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
            return 6;
         }
         if ((active0 & 0x3000800000L) != 0L)
            return 6;
         return -1;
      case 5:
         if ((active0 & 0xcfe0480000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
            return 6;
         }
         if ((active0 & 0x20000L) != 0L)
            return 6;
         return -1;
      case 6:
         if ((active0 & 0x20400000L) != 0L)
            return 6;
         if ((active0 & 0xcfc0080000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
            return 6;
         }
         return -1;
      case 7:
         if ((active0 & 0x80080000L) != 0L)
            return 6;
         if ((active0 & 0xcf40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 7;
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000000L) != 0L)
            return 6;
         if ((active0 & 0xcb40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 8;
            return 6;
         }
         return -1;
      case 9:
         if ((active0 & 0xcb40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 9;
            return 6;
         }
         return -1;
      case 10:
         if ((active0 & 0xcb40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 10;
            return 6;
         }
         return -1;
      case 11:
         if ((active0 & 0xcb40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 11;
            return 6;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000000L) != 0L)
            return 6;
         if ((active0 & 0x8b40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 12;
            return 6;
         }
         return -1;
      case 13:
         if ((active0 & 0x8000000000L) != 0L)
            return 6;
         if ((active0 & 0xb40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 13;
            return 6;
         }
         return -1;
      case 14:
         if ((active0 & 0xb40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 14;
            return 6;
         }
         return -1;
      case 15:
         if ((active0 & 0x300000000L) != 0L)
            return 6;
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 15;
            return 6;
         }
         return -1;
      case 16:
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 16;
            return 6;
         }
         return -1;
      case 17:
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 17;
            return 6;
         }
         return -1;
      case 18:
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 18;
            return 6;
         }
         return -1;
      case 19:
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 19;
            return 6;
         }
         return -1;
      case 20:
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 20;
            return 6;
         }
         return -1;
      case 21:
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 21;
            return 6;
         }
         return -1;
      case 22:
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 22;
            return 6;
         }
         return -1;
      case 23:
         if ((active0 & 0x840000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 23;
            return 6;
         }
         return -1;
      case 24:
         if ((active0 & 0x800000000L) != 0L)
            return 6;
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 24;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 27);
      case 44:
         return jjStopAtPos(0, 13);
      case 47:
         return jjMoveStringLiteralDfa1_0(0xa0L);
      case 59:
         return jjStopAtPos(0, 12);
      case 61:
         return jjStopAtPos(0, 14);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1100000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x80020000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400200000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x2800000000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x30000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1100400000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x8000800000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 0);
         break;
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200080000L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000000L);
      case 78:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0x8001200000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000L);
      case 82:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 83:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x30400000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 68:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 6);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000800000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x200080000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x40020000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 69:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000080000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x1100400000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x80080000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 69:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 71:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 6);
         break;
      case 72:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 6);
         break;
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x8800000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x440400000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 69:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x4120000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x40400000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x8080000000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 69:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x8080000000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x440000000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 6);
         break;
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 82:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 6);
         break;
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x4300000000L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x840000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x300000000L);
      case 82:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L);
      case 75:
         return jjMoveStringLiteralDfa10_0(active0, 0x300000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x300000000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x8300000000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0xb00000000L);
      case 76:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 38, 6);
         break;
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      case 76:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 39, 6);
         break;
      case 90:
         return jjMoveStringLiteralDfa14_0(active0, 0x300000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0x300000000L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
      case 85:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 82:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(15, 32, 6);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(15, 33, 6);
         break;
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000L);
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa18_0(active0, 0x40000000L);
      case 95:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000L);
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000L);
      case 82:
         return jjMoveStringLiteralDfa20_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa21_0(active0, 0x40000000L);
      case 76:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000000L);
      case 79:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 85:
         return jjMoveStringLiteralDfa23_0(active0, 0x40000000L);
      case 87:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa24_0(active0, 0x800000000L);
      case 84:
         return jjMoveStringLiteralDfa24_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(24, 35, 6);
         break;
      case 69:
         return jjMoveStringLiteralDfa25_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(25, 30, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(6);
                  }
                  else if (curChar == 41)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAddTwoStates(8, 10);
                  }
                  break;
               case 17:
               case 6:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(6);
                  break;
               case 16:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(6);
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 40 && kind > 15)
                     kind = 15;
                  break;
               case 5:
                  if (curChar == 41 && kind > 16)
                     kind = 16;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddTwoStates(8, 10);
                  break;
               case 8:
                  if (curChar != 46)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(6);
                  }
                  else if ((0x2000000020000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  else if ((0x800000008000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  if (curChar == 73)
                     jjAddStates(3, 4);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(6);
                  }
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 24;
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(6);
                  }
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if ((0x800000008000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 5:
                  if ((0x2000000020000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(6);
                  break;
               case 11:
                  if (curChar == 73)
                     jjAddStates(3, 4);
                  break;
               case 12:
                  if (curChar == 69 && kind > 18)
                     kind = 18;
                  break;
               case 13:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if (curChar == 71 && kind > 18)
                     kind = 18;
                  break;
               case 19:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   8, 9, 10, 17, 25, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, "\73", 
"\54", "\75", null, null, "\103\122\105\101\124\105", null, 
"\126\101\122\111\101\102\114\105", "\101\123", "\105\116\104", "\123\125\102\122\125\114\105", 
"\125\123\111\116\107", "\101\116\104", "\117\122", "\111\116", "\43", "\122\125\114\105", 
"\122\125\114\105\123\105\124", 
"\104\105\106\101\125\114\124\137\122\125\114\105\123\105\124\137\101\124\124\122\111\102\125\124\105\123", "\103\117\115\120\101\122\105\122", 
"\123\117\125\122\103\105\137\124\117\113\105\116\111\132\105\122", "\124\101\122\107\105\124\137\124\117\113\105\116\111\132\105\122", 
"\105\126\101\114\125\101\124\117\122", 
"\115\111\123\123\111\116\107\137\101\124\124\122\111\102\125\124\105\137\101\114\114\117\127\105\104", "\123\103\117\122\105", "\115\101\124\103\110", 
"\102\111\104\111\122\105\103\124\111\117\116\101\114", "\125\116\111\104\111\122\105\103\124\111\117\116\101\114", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3fffffff001L, 
};
static final long[] jjtoSkip = {
   0x71eL, 
};
static final long[] jjtoSpecial = {
   0x700L, 
};
static final long[] jjtoMore = {
   0x8e0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[26];
private final int[] jjstateSet = new int[52];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ProductMatchingGrammarTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ProductMatchingGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 26; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 11)
         {
            jjmatchedKind = 11;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 6 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
